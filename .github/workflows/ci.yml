name: CI/CD Pipeline

on:
  push:
<<<<<<< HEAD
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-latest
=======
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
>>>>>>> 0dff1c4 (init 2)
    
    steps:
    - uses: actions/checkout@v3
    
<<<<<<< HEAD
    - name: Set up Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.7"
    
    - name: Build
      run: |
        cd StompCoin-macOS
        swift build
    
    - name: Run Tests
      run: |
        cd StompCoin-macOS
        swift test
    
    - name: Check Formatting
      run: |
        cd StompCoin-macOS
        swift format --check . 
=======
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libglfw3-dev \
          libportaudio2-dev \
          libopenal-dev \
          libsqlite3-dev \
          libssl-dev \
          ninja-build \
          clang \
          clang-tidy \
          cppcheck
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_CXX_COMPILER=clang++ \
              -DCMAKE_C_COMPILER=clang \
              -G Ninja ..
    
    - name: Build
      run: |
        cd build
        ninja
    
    - name: Run Tests
      run: |
        cd build
        ctest --output-on-failure
    
    - name: Static Analysis
      run: |
        cd build
        ninja clang-tidy
        cppcheck --enable=all --suppress=missingIncludeSystem --xml-version=2 . 2> cppcheck-report.xml
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.build_type }}
        path: build/
        if-no-files-found: error

  docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/vrmusicstudio:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/vrmusicstudio:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vrmusicstudio:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vrmusicstudio:buildcache,mode=max

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Production
      run: |
        echo "Deploying to production..."
        # Hier können Deployment-Skripte ausgeführt werden
        # z.B. kubectl apply, terraform apply, etc. 
>>>>>>> 0dff1c4 (init 2)
